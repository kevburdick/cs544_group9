Group 9:

Kevin Burdick (kmb474)
Kevin Chang (kc626)
Michael Conway (mjc342)
Haike Yuan (hy332)
CS544, Spring 2013



#### Included Directories and Files ####
README              # This file
Makefile            # Used to build client and test server 
base directory      # Directory that holds the CTP protocol and the Transport layer(TCP socket) 
message             # Directory that holds all the classes for the messages
test                # Directory that holds all the classes for the tests including a server class  


#### Environment ####
Compiler: java version "1.6.0_27"


#### Instructions ####
To compile:
in client directory type "make"

To run test server:
type "java -cp ./test:. Server" in  client directory

To run client:
type "java client <IPAddress>"  or 
     "java client <hostname>"


#### Code Design ####
Code is broken up by message directory, test directory, and base client directory. Below is a brief description of 
the code organization for the client application. 

Base Directory
1) The transport class defines the transport layer of the protocol in this case the TCP socket. A Response Timer provides
a timeout capability if there is no response from the server. An error is sent back to Application layer if 
the timeout occurs.
2) The client file holds that main method and entry into the application and represents the application layer.
3) The CTP file, StateMachine, and CTPResponse defines the CTP protocol. Where CTP.java is the sublayer between the 
Application layer and the state machine. The StateMachine class is the implementation of the DFA. The CTPResponse 
class provides a container for status and application information going back the the Application layer. 

Overview: 

client.java       Application Layer
-----------------------------------
CTP.java                 CTP Layer 

StateMachine.java
-----------------------------------
Transport.java       Transport Layer 


4) The message directory includes all the message classes including a base Message 
class that all other message types inherit from this base class.
5) The test directory contains the test server application to support developement and testing of 
the client application.   

#### Testing ####
1) Open two shells one for server stub and one for client
2) Client and Server file have a series of messages that support a regression test scenario
3) run Server and run Client(see commands above)
4) Should execute a series of messages and pass messages back and forth and then exit. Note 
that an error message back to the client is part of the test were the client attempts to send an invalid
message during a state. In this case an edit message when the client does not have the lock.
5) Also both shells provide some capability to send messages back and forth one at a time although this capability
was not fully developed.  







