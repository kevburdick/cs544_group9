/* * This is the main entry into the client application * */ import message.Connect;import message.Message;import message.AckConnect;import message.Open;/** Main program class for the client application  */public class Client{    static short state;    static short clientID;    public static void main(String[] args)    {        //This is one black box test that corresponds to scenario outline in the Server test file.        //This executes the API and the protocol code is run against the Server test stub        //An application layer would replace this and place similar calls                  //FIXME This should be commandline at least        String host = "Gateway";          CTPResponse response;                System.out.println("client starting");        CTP ctp = new CTP(host);        System.out.println("client connect");        response = ctp.Connect();        processResponse(response);        System.out.println("client open");        response = ctp.Open();        processResponse(response);        System.out.println("client request lock");        response = ctp.ReqLock();        processResponse(response);        System.out.println("client release lock");        response = ctp.ReleaseLock();        processResponse(response);        System.out.println("client move");        response = ctp.Move(255);        processResponse(response);        System.out.println("client request Contents");        response = ctp.ReqContents(255,255);        processResponse(response);        System.out.println("client sync");        response = ctp.Sync();        processResponse(response);        System.out.println("client edit");        byte[] data = new byte[256];        response = ctp.Edit((byte)1,245,data);        processResponse(response);        System.out.println("client close");        response = ctp.Close();        processResponse(response);        System.out.println("client ending");                /*try{        Thread.sleep(4000);        }        */    }        static void processResponse(CTPResponse response)    {    	//for(int i=0;i<response.GetNumResponses();i++)    	for(int i=0;i<1;i++)    	{    		int type = response.getReponseType(i);    		switch (type) {	    		case CTPResponse.ERROR_RSP:{	    			if(response.getStatus(i)== -1)	    			System.out.println("ERROR_RSP Invalid client request");		    			else	    			System.out.println("ERROR_RSP "+response.getErrorText(i));		    			break;	    		}	    		case CTPResponse.ACKCONNECT_RSP:{	    			System.out.println("ACKCONNECT_RSP received");		    			break;	    		}				case CTPResponse.ACKOPEN_RSP:{					System.out.println("ACKOPEN_RSP received");						break;				}				case CTPResponse.ACKLOCK_RSP:{					System.out.println("ACKLOCK_RSP received");						break;				}				case CTPResponse.ACKEDIT_RSP:{					System.out.println("ACKEDIT_RSP received");						break;				}				case CTPResponse.SERVRELEASE_RSP:{					System.out.println("SERVRELEASE_RSP received");						break;				}				case CTPResponse.CONTENTS_RSP:{					System.out.println("CONTENTS_RSP received");						System.out.println("Position in file = "+response.getPosInfile(i));					System.out.println("file data = "+response.getFilData(i));					break;				}				case CTPResponse.MOVE_RSP:{					System.out.println("MOVE_RSP received");						System.out.println("Cursor position in file= "+response.getCursorPos(i));					break;				}				case CTPResponse.STATUS_RSP:{					System.out.println("STATUS_RSP received");						System.out.println("Checksum = "+response.getChecksum(i));					break;				}				case CTPResponse.EDIT_RSP:{					System.out.println("EDIT_RSP received");						System.out.println("action = "+response.getEditAction(i));					System.out.println("Position in file = "+response.getPosInfile(i));					System.out.println("file data = "+response.getFilData(i));					break;									}				case CTPResponse.CLOSE_RSP:{					System.out.println("CLOSE_RSP received");						break;				}				default: 					System.out.println("Invalid Response type received");	    		}//end switch    	}//end for loop        }    }    