/* * This class is the state machine for CTP protocol. It checks the sending and receiving messages  * based on the state.  * @author Kevin Burdick  */ import message.Connect;import message.Message;import message.AckConnect;import message.Contents;import message.Open;import message.Move;import message.ReqLock;import message.Release;import message.ReqContents;import message.Sync;import message.Edit;import message.Close;/** Main program class for the client application  */public class StateMachine{    static short state;    static short clientID;    static Transport transport;    public final int SENDING =1;    public final int RECEIVING =0;    public StateMachine(Transport pTransport) {        state = INIT_STATE;        transport = pTransport; 	 }        public int Process(int direction, Message msg)    {	    switch (state) {	    	case INIT_STATE: {	    		if (msg.getType() == Message.CONNECT_TYPE) {	    			sendRequest(msg);				    			state = VERSION_STATE;	    			return getResponse();	    		}	    		else if(msg.getType() == Message.CLOSE_TYPE) {		    		if(direction == SENDING) {		    			sendRequest(msg);		    			return 1;		    		}		    		else {//received move msg		    			return 1;//need to return contents		    		}		    	}	    		else	    			return -1;	    	}	    	case VERSION_STATE: {		    		if (msg.getType() == Message.ACKCONNECT_TYPE) {	    			AckConnect ackMsg = (AckConnect)msg;	                clientID = ackMsg.getClientID();	                state = CONNECTED_STATE;	                return 1;	    		}	    		else if(msg.getType() == Message.CLOSE_TYPE) {		    		if(direction == SENDING) {		    			sendRequest(msg);		    			return 1;		    		}		    		else {//received move msg		    			return 1;//need to return contents		    		}		    	}	    		else	    			return 0;		        }	    	case CONNECTED_STATE: {			    	if (msg.getType() == Message.OPEN_TYPE) {		    		sendRequest(msg);	    			state = OPENING_STATE;	    			return getResponse();		    	}		    	else if(msg.getType() == Message.CLOSE_TYPE) {		    		if(direction == SENDING) {		    			sendRequest(msg);		    			return 1;		    		}		    		else {//received move msg		    			return 1;//need to return contents		    		}		    	}		    	else		    		return -1; 				    } 	    	case OPENING_STATE: {		    		if (msg.getType() == Message.ACKOPEN_TYPE) {	    			state = OPEN_STATE;	                return 1;	    		}	    		else if(msg.getType() == Message.CLOSE_TYPE) {		    		if(direction == SENDING) {		    			sendRequest(msg);		    			return 1;		    		}		    		else {//received move msg		    			return 1;//need to return contents		    		}		    	}	    		else	    			return 0; 			        }	    	case OPEN_STATE: {			    	if (msg.getType() == Message.REQLOCK_TYPE) {		    		sendRequest(msg);		    		state = WAIT_LOCK_STATE;	    			return getResponse();		    	}		    	else if(msg.getType() == Message.CLOSE_TYPE) {		    		if(direction == SENDING) {		    			sendRequest(msg);		    			return 1;		    		}		    		else {//received move msg		    			return 1;//need to return contents		    		}		    	}		    	else if(msg.getType() == Message.MOVE_TYPE) {		    		if(direction == SENDING)		    			sendRequest(msg);		    		else //received move msg		    			return 1;//need to return contents		    	}		    	else if(msg.getType() == Message.REQCONTENTS_TYPE) {		    		sendRequest(msg);		    		return getResponse();		    	}		    	else if(msg.getType() == Message.CONTENTS_TYPE) {		    		return 1;//need to return contents		    	}		    	else if(msg.getType() == Message.SYNC_TYPE) {		    		sendRequest(msg);		    		return getResponse();		    	}		    	else if(msg.getType() == Message.EDIT_TYPE) {	        		if(direction == SENDING)	        			sendRequest(msg);		    		else //received move msg		    			return 1;		    	}		    	else		    		return -1; 				    } 	        case WAIT_LOCK_STATE: {		        	if (msg.getType() == Message.ACKLOCK_TYPE) {	        		state = LOCKED_STATE;		            return 1;		    	}	        	else if(msg.getType() == Message.CLOSE_TYPE) {		    		if(direction == SENDING) {		    			sendRequest(msg);		    			return 1;		    		}		    		else {//received move msg		    			return 1;//need to return contents		    		}		    	}	        	else if(msg.getType() == Message.MOVE_TYPE) {		    		if(direction == SENDING)		    			sendRequest(msg);		    		else //received move msg		    			return 1; //need to return contents		    	}	        	else if(msg.getType() == Message.REQCONTENTS_TYPE) {	        		sendRequest(msg);		    		return getResponse();		    	}		    	else if(msg.getType() == Message.CONTENTS_TYPE) {		    		return 1;//need to return contents		    	}		    	else if(msg.getType() == Message.SYNC_TYPE) {		    		sendRequest(msg);		    		return getResponse();		    	}		    	else if(msg.getType() == Message.EDIT_TYPE) {	        		if(direction == SENDING)	        			sendRequest(msg);		    		else //received move msg		    			return 1;		    	}		    	else		    		return 0; 				    }	        case LOCKED_STATE: {		        	if (msg.getType() == Message.RELEASE_TYPE) {	        		sendRequest(msg);	        		return getResponse();		    	}	        	else if(msg.getType() == Message.CLOSE_TYPE) {		    		if(direction == SENDING) {		    			sendRequest(msg);		    			return 1;		    		}		    		else {//received move msg		    			return 1;//need to return contents		    		}		    	}	        	else if (msg.getType() == Message.SERVRELEASE_TYPE) {	        		state = OPEN_STATE;	                return 1;	        	}	        	else if(msg.getType() == Message.MOVE_TYPE) {		    		if(direction == SENDING)		    			sendRequest(msg);		    		else //received move msg		    			return 1;		    	}	        	else if(msg.getType() == Message.SYNC_TYPE) {	        		sendRequest(msg);		    		return getResponse();		    	}	        	else if(msg.getType() == Message.EDIT_TYPE) {	        		if(direction == SENDING)	        			sendRequest(msg);		    		else //received move msg		    			return 1;		    	}	        	else if (msg.getType() == Message.ACKEDIT_TYPE) {	                return 1;	        	}		    	else		    		return -1; 					    }	        default:	        	return -1; 			    }    }        void sendRequest(Message msg)    {    	transport.sendRequest(msg.getbyteArray());    	    }        int getResponse()    {    	byte[] buff = transport.getResponse();         Message msg = Message.makeMessage(buff);    	return Process(RECEIVING, msg);    }         private static final short INIT_STATE = 1;    private static final short VERSION_STATE = 2;   	private static final short CONNECTED_STATE = 3;	private static final short OPENING_STATE = 4;	private static final short OPEN_STATE = 5;	private static final short WAIT_LOCK_STATE = 6;    private static final short LOCKED_STATE = 7;}    