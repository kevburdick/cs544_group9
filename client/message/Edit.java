/* * This class defines the Edit message * client → server or server → client indicating an edit * @author Kevin Burdick  */ package message;import java.util.ArrayList;import java.nio.ByteBuffer;import java.nio.ByteOrder;public class Edit extends Message{    /**    *  Constructor    */   public Edit(short pClientID, byte pAction, int pPosition, byte[] data)   {      super(Message.EDIT_TYPE,(short)(header_size+data.length));      fileData = new byte[data.length];      clientID = pClientID;      sectionLength = data.length;      filePosition = pPosition;      action = pAction;      //copy file data      System.arraycopy(data, 0,fileData, 0,data.length);       }	/**    *  Constructor    */   public Edit(byte[] pMsg)   {      //FIXME should throw exception		super(Message.EDIT_TYPE,header_size);         fileData = new byte[pMsg.length-14];      type = (short)((pMsg[0] & 0xff<<8)|(pMsg[1] & 0xff));       length = (short)((pMsg[2] & 0xff<<8)|(pMsg[3] & 0xff));		clientID = (short)((pMsg[4]& 0xff<<8)|(pMsg[5] & 0xff));      action = pMsg[6]; 		sectionLength = (int)((pMsg[7]& 0xff<<8)|(pMsg[8] & 0xff<<8)|(pMsg[9]& 0xff<<8)|(pMsg[10] & 0xff<<0));         filePosition = (int)((pMsg[11]& 0xff<<8)|(pMsg[12] & 0xff<<8)|(pMsg[13]& 0xff<<8)|(pMsg[14] & 0xff<<0));          //copy file data      System.arraycopy(pMsg, 15,fileData, 0,pMsg.length-15);    }       /**    *  Returns the byte array of the message     */	public byte[] getbyteArray() {      byte[] output = new byte[15+fileData.length];      output[0] = (byte)(type >> 8);      output[1] = (byte)type;      output[2] = (byte)(length >> 8);		output[3] = (byte)length;      output[4] = (byte)(clientID >> 8);      output[5] = (byte)clientID;      output[6] = action;      byte[] temp2 = ByteBuffer.allocate(4).putInt(sectionLength).array();      for(int i=0;i<4;i++) {          output[7+i] = temp2[i];        }      temp2 = ByteBuffer.allocate(4).putInt(filePosition).array();      for(int j=0;j<4;j++) {          output[11+j] = temp2[j];        }      //copy file data      System.arraycopy(fileData, 0,output, 15,fileData.length);       return output;   }	   public short getClientID() {       return clientID;   }   public int getFilePosition() {      return filePosition;   }   public int getSectionLen() {      return sectionLength;   }	public byte[] getFileData() {       return fileData;   }      public int getAction() {      return action;   }   public void dumpMsg() {      System.out.println("message");      System.out.println("type = "+type);      System.out.println("length = "+length);      System.out.println("clientID = "+clientID);      System.out.println("action = "+action);       System.out.println("filePosition = "+filePosition);      System.out.println("sectionLength = "+sectionLength);      System.out.println("data size = "+fileData.length);	}       //file data    private  byte[] fileData;	//this is the size of the header, does not include data field   private static final short header_size= 13;    private short clientID;   private int filePosition;   private int sectionLength;   private byte action;}