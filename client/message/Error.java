/* * This class defines the Error message * @author Kevin Burdick  */ package message;import java.util.ArrayList;import java.nio.ByteBuffer;import java.nio.ByteOrder;public class Error extends Message{   /**    *  Constructor    */   public Error(short code)   {      super(Message.ERROR_TYPE,header_size);      errorCode = code;    }   	/**    *  Constructor    */   public Error(byte[] pMsg)   {      //FIXME should throw exception		super(Message.CLOSE_TYPE,header_size);      optionsList = new ArrayList<String>();          type = (short)((pMsg[0] & 0xff<<8)|(pMsg[1] & 0xff));        length = (short)((pMsg[2] & 0xff<<8)|(pMsg[3] & 0xff));       errorCode = (short)((pMsg[4] & 0xff<<8)|(pMsg[5] & 0xff));    }      public short getErrorCode()   {	   return errorCode;   }       /**    *  Returns the byte array of the message     */	public byte[] getbyteArray() {      byte[] temp = new byte[header_size];      temp[0] = (byte)(type >> 8);      temp[1] = (byte)type;      temp[2] = (byte)(length >> 8);      temp[3] = (byte)length;      temp[4] = (byte)(errorCode >> 8);      temp[5] = (byte)errorCode;      return temp;   }   public void dumpMsg() {      System.out.println("message");      System.out.println("type = "+type);      System.out.println("length = "+length);      System.out.println("errorCode = "+errorCode);	}        //options list   private  ArrayList<String> optionsList;	//this is the size of the header, does not include options field   private static final short header_size= 6;   public static final short BAD_MESSAGE_ERR = 1;   public static final short UNSUPPORTED_VERSION_ERR = 2;   public static final short BAD_FILEID_ERR = 3;   public static final short CANT_LOCK_ERR = 4;   public static final short REJECT_EDIT_ERR = 5;   //text associated with error number   public static final String errorText[] = {"BAD_MESSAGE_ERR",	                                        "UNSUPPORTED_VERSION_ERR",	                                        "BAD_FILEID_ERR",	                                        "CANT_LOCK_ERR",	                                        "REJECT_EDIT_ERR"};      private short errorCode;}