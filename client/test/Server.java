/* * This is the main entry into the test server application * *///package test; import java.net.*;import java.io.*;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import message.Connect;import message.Contents;import message.Message;import message.AckConnect;import message.Ack;import message.Move;import message.Status;import test.TCPSock;/** Main program class for the test server application  */public class Server{    public static void main(String[] args)    {    	InputStreamReader input = new InputStreamReader(System.in) ;    	BufferedReader inputBuff = new BufferedReader(input) ;    	String menuSelection;     	    	while(true) {    		DisplayMainMenu();    		try {	    		menuSelection = inputBuff.readLine();	    		if(menuSelection.equals("1"))	    			SendMessage();	    		else if(menuSelection.equals("2"))	    			ReadMessage();	    		else if(menuSelection.equals("3"))	    			RegressionTest();	    		else if(menuSelection.equals("4"))					DFATest();		    		}    		catch (IOException err) {    			System.out.println("Error reading line");	    		}    	}    }    static void SendMessage()    {    	System.out.println("Not implemented yet");    }        static void ReadMessage()    {    	System.out.println("Not implemented yet");    }        static void DisplayMainMenu()    {    	System.out.println("******");    	System.out.println("Menu");    	System.out.println("******");    	System.out.println("Enter Selection");    	System.out.println("1) Send Message");    	System.out.println("2) Receive Message");    	System.out.println("3) Run regression test");    	System.out.println("4) DFA test");    }        /*     * This method executes a set of request/response cases with the client and is a quick test to see if      * everything is working. This test is not a complete white-box test      */    static void RegressionTest()    {    	        System.out.println("test server starting");        TCPSock server;        short version =1;        short id =1025;        int port = 5449;        //This is one black box test that corresponds to scenario outline the client file.        //there is no checking in this file since its just a test stub, if it does not complete         //it fails        try {		     ServerSocket listenSock = new ServerSocket(port);			  server = new TCPSock(listenSock.accept());           //receive connect request		   byte[] buff = server.getRequest();		   Message msg = Message.makeMessage(buff);		   Connect connect = (Connect)msg;           AckConnect ack = new AckConnect(version, id);           ack.dumpMsg();           byte[] test = ack.getbyteArray();           for(int i=0;i<8;i++)           System.out.println("hre"+test[i]);           server.sendResponse(ack.getbyteArray());           //receive open request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg = new Ack(Message.ACKOPEN_TYPE);           server.sendResponse(ackMsg.getbyteArray());           //receive lock request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg2 = new Ack(Message.ACKLOCK_TYPE);           server.sendResponse(ackMsg2.getbyteArray());           //receive release lock request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg3 = new Ack(Message.SERVRELEASE_TYPE);           server.sendResponse(ackMsg3.getbyteArray());           //receive move request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Move move = (Move)msg;           //receive request contents request           buff = server.getRequest();           msg = Message.makeMessage(buff);              byte[] data = new byte[] {(byte)1,(byte)2,(byte)3,(byte)4,(byte)5,(byte)6,(byte)7,(byte)8,(byte)9,(byte)10};           Contents contents = new Contents(255,10,data);           server.sendResponse(contents.getbyteArray());           //receive sync request           buff = server.getRequest();           msg = Message.makeMessage(buff);           byte[] checksum = new byte[32];           Status status = new Status();           status.setChecksum(checksum);           server.sendResponse(status.getbyteArray());           //receive edit request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg4 = new Ack(Message.ACKEDIT_TYPE);           server.sendResponse(ackMsg3.getbyteArray());           //receive close request           buff = server.getRequest();           msg = Message.makeMessage(buff);                     //close the socket           server.close();  		  }        catch(Exception e) {           System.out.println("Exception"+e.toString());		  }        System.out.println("test server closed");     }        /*     * This method test the state machine in the client and verifies that it is working correctly     */    static void DFATest()    {    	System.out.println("Not implemented yet");    /*	short version =1;        short id =1025;    	Map<Integer, Message> map = new HashMap<Integer, Message>();    	Error ErrMsg = new Error();    	//Connect connMsg = new Connect();    	AckConnect ack = new AckConnect(version, id);    	map.put("1", "Jan");               public static final short OPEN_TYPE =4;        public static final short ACKOPEN_TYPE =5;     	 public static final short ACKLOCK_TYPE =6;     	 public static final short ACKEDIT_TYPE =7;     	 public static final short SERVRELEASE_TYPE =8;        public static final short REQCONTENTS_TYPE =9;        public static final short CONTENTS_TYPE =10;        public static final short MOVE_TYPE =11;//async        public static final short REQLOCK_TYPE =12;        public static final short RELEASE_TYPE =13;        public static final short SYNC_TYPE =14;        public static final short STATUS_TYPE =15;        public static final short EDIT_TYPE =16;//async        public static final short CLOSE_TYPE =17;//async    */		    	    }   }    