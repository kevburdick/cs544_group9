/* * This is the main entry into the test server application * */ import java.net.*;import java.io.*;import message.Connect;import message.Contents;import message.Message;import message.AckConnect;import message.Ack;import message.Move;import message.ReqContents;import message.Status;import test.TCPSock;/** Main program class for the test server application  */public class Server{    public static void main(String[] args)    {        System.out.println("test server starting");        TCPSock server;        short version =1;        short id =1025;        int port = 5449;        //This is one black box test that corresponds to scenario outline the client file.        //there is no checking in this file since its just a test stub        try {		     ServerSocket listenSock = new ServerSocket(port);			  server = new TCPSock(listenSock.accept());           //receive connect request		     byte[] buff = server.getRequest();		     Message msg = Message.makeMessage(buff);		     Connect connect = (Connect)msg;           AckConnect ack = new AckConnect(version, id);           server.sendResponse(ack.getbyteArray());           //receive open request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg = new Ack(Message.ACKOPEN_TYPE);           server.sendResponse(ackMsg.getbyteArray());           //receive lock request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg2 = new Ack(Message.ACKLOCK_TYPE);           server.sendResponse(ackMsg2.getbyteArray());           //receive release lock request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg3 = new Ack(Message.SERVRELEASE_TYPE);           server.sendResponse(ackMsg3.getbyteArray());           //receive move request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Move move = (Move)msg;           //receive request contents request           buff = server.getRequest();           msg = Message.makeMessage(buff);              byte[] data = new byte[] {(byte)1,(byte)2,(byte)3,(byte)4,(byte)5,(byte)6,(byte)7,(byte)8,(byte)9,(byte)10};           Contents contents = new Contents(id,255,10,data);           server.sendResponse(contents.getbyteArray());           //receive sync request           buff = server.getRequest();           msg = Message.makeMessage(buff);           byte[] checksum = new byte[32];           Status status = new Status();           status.setChecksum(checksum);           server.sendResponse(status.getbyteArray());           //receive edit request           buff = server.getRequest();           msg = Message.makeMessage(buff);           Ack ackMsg4 = new Ack(Message.ACKEDIT_TYPE);           server.sendResponse(ackMsg3.getbyteArray());           //receive close request           buff = server.getRequest();           msg = Message.makeMessage(buff);                     //close the socket           server.close();  		  }        catch(Exception e) {           System.out.println("Exception"+e.toString());		  }        System.out.println("test server closed");     }   }    