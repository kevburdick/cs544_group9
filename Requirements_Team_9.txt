The files in server/ are from the C version of the server that was unfinished
when we decided to switch to Java to take advantage of a common codebase.
However, they are listed in addition to the Java implementation so far for the
elements they provide.

STATEFUL:
    client/StateMachine.java
    server/protocol.{h,c}

CONCURRENT:
    A planned server/ctpd.c would maintain a list of clients (referenced in
    server/protocol.h) and use epoll to wait for a message from any of them,
    or from the listening socket. Some functions in protocol.c transmit to
    other clients.

SERVICE:
    server/ctpd.c would have bound to port 5449 and waited for data on this
    socket, as well as on the client sockets.

CLIENT:
    client/Client.java is a debugging/test UI at the same layer as the missing
    client UI and provides the capability to call into the CTP protocol and
    receive information from the CTP protocol. It takes at the command line
    the hostname or IP Address of the server. A selection menu is provided for
    debugging and testing purposes. An automated regression test is also
    provided to test with the Client Application and with a server test stub.
    The Client UI interfaces to the CTP protocol at the next layer in the
    stack. All messages in the protocol document are implemented per the
    specification with the exception of options which were not fully defined
    in the document. Messages were verified using Wireshark. Client
    application works as a single thread and contains a Response Timeout to
    prevent the client from hanging on a response.  

UI:
    client/Client.java is a debugging/test application at the same layer as
    the missing client application (with UI).
